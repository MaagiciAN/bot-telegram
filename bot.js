const { Telegraf, Markup } = require('telegraf');
const fs = require('fs').promises;
const path = require('path');

// –í—Å—Ç–∞–≤—Ç–µ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω –≤—ñ–¥ BotFather
const bot = new Telegraf('7216155455:AAEiQ_Lvu1Sw7LUSweKUdPNgbBswAqTZnGw');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ JSON-—Ñ–∞–π–ª—É
async function readProducts() {
  try {
    const data = await fs.readFile('products.json', 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É:', error);
  }
}

// –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É /shop —É –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
bot.telegram.setMyCommands([
  { command: 'shop', description: '–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤' }
]);

bot.start((ctx) => {
  ctx.reply('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ —Å–≤–æ—ó –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ —Å–∏–≥–∞—Ä–µ—Ç–∏, –∞ —Ç–∞–∫–æ–∂ –Ω–∞—Å–æ–ª–æ–¥–∏—Ç–∏—Å—è –Ω–æ–≤–∏–º–∏ —Å–º–∞–∫–∞–º–∏üòÆ‚Äçüí®ü•≥');
});

bot.command('shop', async (ctx) => {
  try {
    const products = await readProducts();
    const productButtons = products.map(product => 
      Markup.button.callback(`${product.name} (${product.stock} –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ)`, `buy_${product.name}`)
    );
    
    ctx.reply('‚úÖ–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏:', Markup.inlineKeyboard(productButtons, { columns: 1 }).resize());
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤:', error);
    ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
});

(async () => {
  try {
    const products = await readProducts();
    products.forEach(product => {
      bot.action(`buy_${product.name}`, async (ctx) => {
        try {
          const products = await readProducts();
          const currentProduct = products.find(p => p.name === product.name);
          
          if (currentProduct.stock > 0) {
            const flavorList = currentProduct.flavors.map(flavor => `- ${flavor}`).join('\n');
            const imagePath = path.resolve(__dirname, currentProduct.image); // –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            
            await ctx.replyWithPhoto({ source: imagePath }, {
              caption: `–î–æ—Å—Ç—É–ø–Ω—ñ —Å–º–∞–∫–∏ üëáüèª\n${currentProduct.name}\n${flavorList}`
            });
            await ctx.reply(`–¶—ñ–Ω–∞ - ${currentProduct.price} –≥—Ä–Ω üíµ\n\n–î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–ø—Ç–æ–º –ø–∏—à—ñ—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º @majorchamp1`);
            await ctx.reply(`–í–∏ –æ–±—Ä–∞–ª–∏ ${currentProduct.name}. –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—èü§î:`);
            
            bot.on('text', async (ctx) => {
              const quantity = parseInt(ctx.message.text);
              if (quantity > 0 && quantity <= currentProduct.stock) {
                await ctx.reply('–ó–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≤–∏–±–æ—Ä—É —Ç–æ–≤–∞—Ä—É:', 
                  Markup.inlineKeyboard([
                    Markup.button.url('–ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–ºüë§', 'https://t.me/majorchamp1'),
                    Markup.button.callback('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≤–∏–±–æ—Ä—É —Ç–æ–≤–∞—Ä—É‚¨ÖÔ∏è', 'return_to_shop')
                  ], { columns: 1 }).resize()
                );
              } else {
                await ctx.reply('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–±–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ.');
              }
            });
          } else {
            await ctx.reply(`${currentProduct.name} –Ω–∞—Ä–∞–∑—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –Ω–∞ —Å–∫–ª–∞–¥—ñ.`);
          }
        } catch (error) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥—ñ—ó –ø–æ–∫—É–ø–∫–∏:', error);
          ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
        }
      });
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤:', error);
  }
})();

bot.action('return_to_shop', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–∞—Å –¥–æ –≤–∏–±–æ—Ä—É —Ç–æ–≤–∞—Ä—ñ–≤...');
  try {
    const products = await readProducts();
    const productButtons = products.map(product => 
      Markup.button.callback(`${product.name} (${product.stock} –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ)`, `buy_${product.name}`)
    );
    
    await ctx.reply('–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏:', Markup.inlineKeyboard(productButtons, { columns: 1 }).resize());
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤:', error);
    ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
});

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!!');

// https://www.amevape.com/wp-content/uploads/2024/05/HM021-12.jpg
// https://www.amevape.com/wp-content/uploads/2024/01/%E7%94%B5%E5%AD%90%E7%83%9F21.4psd-500x500.jpg
// 7216155455:AAEiQ_Lvu1Sw7LUSweKUdPNgbBswAqTZnGw




